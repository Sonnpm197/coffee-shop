spring:
  application:
    name: order-service
  profiles:
    active: dev
  config:
    import: optional:configserver:http://localhost:8071
  cloud:
    stream:
      kafka:
        binder:
          brokers:
            - http://localhost:9093
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/coffee-shop
          jwk-set-uri: http://localhost:8080/realms/coffee-shop/protocol/openid-connect/certs

  kafka:
    bootstrap-servers: http://localhost:9093
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8765/eureka}
    register-with-eureka: true
    fetch-registry: true
  instance:
    preferIpAddress: true

server:
  port: 8081

management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0
    enabled: true
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  circuitbreaker:
    instances:
      order-service:
        registerHealthIndicator: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        recordExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException

resilience4j.bulkhead:
  instances:
    bulkhead-order-service:
      maxWaitDuration: 2ms
      maxConcurrentCalls: 20


resilience4j.thread-pool-bulkhead:
  instances:
    bulkhead-order-service:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

resilience4j.retry:
  instances:
    retry-order-service:
      waitDuration: 10000
      retry-exceptions:
        - java.util.concurrent.TimeoutException


